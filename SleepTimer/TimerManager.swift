//
//  TimerManager.swift
//  SleepTimer
//
//  Created by Timofey Sinitsyn on 13.03.2025.
//

import Foundation
import UserNotifications
import Cocoa


class TimerManager {
    static let shared = TimerManager()
    private var sleepTimer: Timer?
    private var cancelSleep = false

    private let isDebugMode = true // üî• –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º

    func putToSleep() {
        let sleepDelay = UserDefaults.standard.integer(forKey: "sleepTimer") * 60

        let adjustedSleepDelay = isDebugMode ? max(sleepDelay / 60, 1) : sleepDelay // üî• –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 1 —Å–µ–∫
        let warningTime = isDebugMode ? 5 : 300 // üî• 5 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 5 –º–∏–Ω—É—Ç –≤ —Ç–µ—Å—Ç–µ

        print("‚è≥ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ \(adjustedSleepDelay) —Å–µ–∫—É–Ω–¥")

        if adjustedSleepDelay > 0 {
            showNotification(title: "Mac will sleep in \(adjustedSleepDelay) sec",
                             body: "A warning will appear in \(warningTime) sec.")

            if adjustedSleepDelay > warningTime {
                print("‚ö†Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç")
                sleepTimer = Timer.scheduledTimer(withTimeInterval: TimeInterval(adjustedSleepDelay - warningTime), repeats: false) { _ in
                    if !self.cancelSleep {
                        self.showSleepWarning()
                    }
                }
            }

            print("üí§ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä —Å–Ω–∞ —á–µ—Ä–µ–∑ \(adjustedSleepDelay) —Å–µ–∫—É–Ω–¥")
            DispatchQueue.main.asyncAfter(deadline: .now() + TimeInterval(adjustedSleepDelay)) { [weak self] in
                guard let self = self else { return }
                if !self.cancelSleep {
                    print("üí§ Mac —É—Ö–æ–¥–∏—Ç –≤ —Å–æ–Ω!")
                    self.runShellCommand("pmset sleepnow")
                } else {
                    print("‚èπ –°–æ–Ω –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                }
            }
        } else {
            print("üí§ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–æ–Ω!")
            runShellCommand("pmset sleepnow")
        }
    }

    func applyTimers(startTimer: Bool = false) {
        cancelSleep = false

        let sleepEnabled = UserDefaults.standard.bool(forKey: "sleepEnabled")
        let muteEnabled = UserDefaults.standard.bool(forKey: "muteEnabled")

        if startTimer {
            if sleepEnabled {
                putToSleep()
            } else {
                print("‚èπ –°–æ–Ω –æ—Ç–∫–ª—é—á—ë–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
            }

            if muteEnabled {
                muteAfterDelay()
            } else {
                print("üîá –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
            }
        } else {
            print("‚è≥ –¢–∞–π–º–µ—Ä—ã –ù–ï –∑–∞–ø—É—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        }
        
        updateMenuBarTimer() // üî• –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é-–±–∞—Ä –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤
    }


    func muteAfterDelay() {
        let muteDelay = UserDefaults.standard.integer(forKey: "muteTimer") * 60
        let warningTime = 15 // üî• –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞

        if muteDelay > 0 {
            print("üîá –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ —á–µ—Ä–µ–∑ \(muteDelay) —Å–µ–∫—É–Ω–¥")

            showNotification(title: "Sound will mute in \(muteDelay / 60) min",
                             body: "A warning will appear 5 sec before muting.")

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–æ mute
            if muteDelay > warningTime {
                DispatchQueue.main.asyncAfter(deadline: .now() + TimeInterval(muteDelay - warningTime)) { [weak self] in
                    if !(self?.cancelSleep ?? false) {
                        self?.showMuteWarning()
                    }
                }
            }

            // –¢–∞–π–º–µ—Ä –¥–ª—è mute
            DispatchQueue.main.asyncAfter(deadline: .now() + TimeInterval(muteDelay)) { [weak self] in
                if !(self?.cancelSleep ?? false) {
                    self?.muteAudio()
                }
            }
        }
    }

    private func showMuteWarning() {
        let content = UNMutableNotificationContent()
        content.title = "Sound will mute in 5 sec"
        content.body = "Click 'Cancel' to prevent mute."
        content.sound = .default

        let cancelAction = UNNotificationAction(identifier: "CANCEL_MUTE", title: "Cancel", options: [.foreground])
        let category = UNNotificationCategory(identifier: "MUTE_WARNING", actions: [cancelAction], intentIdentifiers: [], options: [])

        UNUserNotificationCenter.current().setNotificationCategories([category])
        content.categoryIdentifier = "MUTE_WARNING"

        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: nil)
        UNUserNotificationCenter.current().add(request)
    }


    @objc private func muteAudio() {
        print("üîá –í—ã–∫–ª—é—á–∞–µ–º –∑–≤—É–∫!")
        runShellCommand("osascript -e \"set volume output muted true\"")
    }

    private func showSleepWarning() {
        let content = UNMutableNotificationContent()
        content.title = "Mac will sleep in 5 sec"
        content.body = "Click 'Cancel' to prevent sleep."
        content.sound = .default

        let cancelAction = UNNotificationAction(identifier: "CANCEL_SLEEP", title: "Cancel", options: [.foreground])
        let category = UNNotificationCategory(identifier: "SLEEP_WARNING", actions: [cancelAction], intentIdentifiers: [], options: [])

        UNUserNotificationCenter.current().setNotificationCategories([category])
        content.categoryIdentifier = "SLEEP_WARNING"

        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: nil)
        UNUserNotificationCenter.current().add(request)
    }

    private func showNotification(title: String, body: String) {
        print("üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: \(title)")

        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default
        content.interruptionLevel = .timeSensitive // üî• –¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ

        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: nil)
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
            } else {
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
            }
        }
    }

    func cancelSleepTimer() {
        cancelSleep = true
        print("‚èπ –¢–∞–π–º–µ—Ä —Å–Ω–∞ –æ—Ç–º–µ–Ω—ë–Ω!")
    }

    func cancelMuteTimer() {
        cancelSleep = true
        print("üîá –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ –æ—Ç–º–µ–Ω—ë–Ω!")
    }

    func cancelAllTimers() {
        cancelSleep = true
        sleepTimer?.invalidate()
        print("‚ùå –í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω—ã!")

        showNotification(title: "All Timers Cancelled", body: "Sleep and mute timers have been stopped.")
        
        updateMenuBarTimer() // üî• –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é-–±–∞—Ä –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    }


    func updateMenuBarTimer() {
        DispatchQueue.main.async {
            if let appDelegate = NSApplication.shared.delegate as? AppDelegate {
                appDelegate.updateMenuBarTimer()
            }
        }
    }


    private func runShellCommand(_ command: String) {
        let process = Process()
        process.launchPath = "/bin/zsh"
        process.arguments = ["-c", command]
        process.launch()
    }
}
