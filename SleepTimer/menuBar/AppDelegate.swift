//
//  AppDelegate.swift
//  SleepTimer
//
//  Created by Timofey Sinitsyn on 13.03.2025.
//

import Cocoa
import SwiftUI
import UserNotifications


class AppDelegate: NSObject, NSApplicationDelegate {
    var statusItem: NSStatusItem?

    func applicationDidFinishLaunching(_ notification: Notification) {
        setupMenuBar()
        TimerManager.shared.applyTimers(startTimer: false)
        requestNotificationPermissions()
        registerNotificationActions()
        UNUserNotificationCenter.current().delegate = self // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    }
    
    func registerNotificationActions() {
        let center = UNUserNotificationCenter.current()
        center.delegate = self  // üî• –ù–∞–∑–Ω–∞—á–∞–µ–º AppDelegate –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

        // ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è —Å–Ω–∞
        let cancelSleepAction = UNNotificationAction(identifier: "CANCEL_SLEEP", title: "Cancel Sleep", options: [.destructive])
        let sleepCategory = UNNotificationCategory(identifier: "SLEEP_WARNING", actions: [cancelSleepAction], intentIdentifiers: [], options: [])

        // ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
        let cancelMuteAction = UNNotificationAction(identifier: "CANCEL_MUTE", title: "Cancel Mute", options: [.destructive])
        let muteCategory = UNNotificationCategory(identifier: "MUTE_WARNING", actions: [cancelMuteAction], intentIdentifiers: [], options: [])

        // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        center.setNotificationCategories([sleepCategory, muteCategory])

        print("‚úÖ –î–µ–π—Å—Ç–≤–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    }


    
    
    func requestNotificationPermissions() {
        let center = UNUserNotificationCenter.current()
        center.requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
            } else {
                print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(granted ? "–î–∞" : "–ù–µ—Ç")")
            }
        }
    }


    func setupMenuBar() {
        let menu = NSMenu()
        
        let muteItem = NSMenuItem(title: "Mute in \(UserDefaults.standard.integer(forKey: "muteTimer")) min",
                                  action: #selector(startMuteTimer), keyEquivalent: "M")
        muteItem.tag = 101
        menu.addItem(muteItem)

        let sleepItem = NSMenuItem(title: "Sleep in \(UserDefaults.standard.integer(forKey: "sleepTimer")) min",
                                   action: #selector(putToSleep), keyEquivalent: "S")
        sleepItem.tag = 100
        menu.addItem(sleepItem)

        menu.addItem(NSMenuItem.separator())

        let cancelAllItem = NSMenuItem(title: "Cancel All Timers",
                                       action: #selector(cancelAllTimers), keyEquivalent: "C") // üî• –ö–ª–∞–≤–∏—à–∞ "C" –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        cancelAllItem.tag = 102
        menu.addItem(cancelAllItem)

        menu.addItem(NSMenuItem.separator())
        menu.addItem(NSMenuItem(title: "Settings", action: #selector(openSettings), keyEquivalent: ","))
        menu.addItem(NSMenuItem(title: "Quit", action: #selector(quitApp), keyEquivalent: "Q"))

        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)
        statusItem?.button?.image = NSImage(systemSymbolName: "speaker.wave.2", accessibilityDescription: "Sound Control")
        statusItem?.menu = menu
    }

    @objc func cancelAllTimers() {
        TimerManager.shared.cancelAllTimers()
        updateMenuBarTimer() // üî• –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é-–±–∞—Ä –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–æ–≤
    }



    @objc func putToSleep() {
        TimerManager.shared.applyTimers(startTimer: true) // üî• –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏
    }


    func updateMenuBarTimer() {
        if let menu = statusItem?.menu {
            if let sleepItem = menu.item(withTag: 100) {
                let sleepTime = UserDefaults.standard.integer(forKey: "sleepTimer")
                sleepItem.title = "Sleep in \(sleepTime) min"
            }
            
            if let muteItem = menu.item(withTag: 101) {
                let muteTime = UserDefaults.standard.integer(forKey: "muteTimer")
                muteItem.title = "Mute in \(muteTime) min"
            }
        }
    }
    
    @objc func startMuteTimer() {
        TimerManager.shared.applyTimers(startTimer: true)
        updateMenuBarTimer()
    }



    @objc func openSettings() {
        SettingsWindowController.shared.showWindow(nil)
    }
    
    @objc func muteAudio() {
        runShellCommand("osascript -e \"set volume output muted true\"")
    }

    @objc func unmuteAudio() {
        runShellCommand("osascript -e \"set volume output muted false\"")
    }

    @objc func quitApp() {
        NSApplication.shared.terminate(nil)
    }

    private func runShellCommand(_ command: String) {
        let process = Process()
        process.launchPath = "/bin/zsh"
        process.arguments = ["-c", command]
        process.launch()
    }
}

extension AppDelegate: UNUserNotificationCenterDelegate {
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        
        print("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: \(response.actionIdentifier)")
        
        switch response.actionIdentifier {
        case "CANCEL_SLEEP":
            print("‚èπ –°–æ–Ω –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
            TimerManager.shared.cancelSleepTimer()
            
        case "CANCEL_MUTE":
            print("üîá –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
            TimerManager.shared.cancelMuteTimer()
            
        default:
            print("‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: \(response.actionIdentifier)")
        }
        
        completionHandler()
    }
}



